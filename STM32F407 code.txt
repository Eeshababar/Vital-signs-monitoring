/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "math.h"
#include "time.h"
#include "stdlib.h"
#include "string.h"
#include <stdio.h>

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
#define max30100  0xAE
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
int intToStr(int x, char str[], int d);
void ftoa(float n, char *res, int afterpoint);
void reverse(char *str, int len);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

	//initializing variables for reading from pulseoximeter
	uint8_t i2cBuf[8]; //to write 2 bytes at a time
	uint8_t WR_PTR[8]={0,0,0,0,0,0,0,0};
	uint8_t RD_PTR[8]={0,0,0,0,0,0,0,0};
	uint8_t sensor_samples=0;
	uint8_t i=0;
	uint16_t rd_point = 0;
	uint8_t HAL_TxStatus=0xFF;
	int k;
	uint8_t newBuf1[8]={0,0,0,0,0,0,0,0};
	 
	float R;
	float IR;
	
	//initializing variables for dc removal from IR and R
	float x, alpha, prev_w = 0;
	float w_n = 0;
	float y_IR;
	
	float x_R, prev_w_R = 0;
	float w_n_R = 0;
	float y_R;
	
	//initializing variables for filter
	float v0 = 0;
	float v1 = 0;
	float result_R = 0;
	float v2 = 0;
	float v3 = 0;
	float result_IR = 0;	
	

	//initializing variables for recording Oxygen
	float ratioRMS, Oxygen;
	int oxygen_danger = 0;
	
	//initializing variables for detecting Pulses
	int zero = 0;
	int pulse = 0;
	int t = 0;
	int t1 = 0;
	int t2 = 0;
	float Pulse_rate;
	int flag_high = 1;
	int low_pulse = 0;
	int high_pulse = 0;
	int flag_1 = 0;;
	
	//initializing variables for detecting Temperature
	uint32_t adc_buf;
	float Temperature;
	int low_temp = 0;
	int high_temp = 0;
	
	//initializing variables for sending data through UART
	char txData1[20]; 
  	char txData2[20]; 
	char txData3[20]; 

void reverse(char *str, int len) 
{ 
    int i=0, j=len-1, temp; 
    while (i<j) 
    { 
        temp = str[i]; 
        str[i] = str[j]; 
        str[j] = temp; 
        i++; j--; 
    } 
} 
	
//Converts integer to string	
int intToStr(int x, char str[], int d) 
{ 
    int i = 0; 
    while (x) 
    { 
        str[i++] = (x%10) + '0'; 
        x = x/10; 
    } 
  
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
        str[i++] = '0'; 
  
    reverse(str, i); 
    str[i] = '\0'; 
    return i; 
} 

// Converts a floating point number to string. 
void ftoa(float n, char *res, int afterpoint) 
{ 
    // Extract integer part 
    int ipart = (int)n; 
  
    // Extract floating part 
    float fpart = n - (float)ipart; 
  
    // convert integer part to string 
    int i = intToStr(ipart, res, 0); 
  
    // check for display option after point 
    if (afterpoint != 0) 
    { 
        res[i] = '.';  // add dot 
  
        // Get the value of fraction part upto given no. 
        // of points after dot. The third parameter is needed 
        // to handle cases like 233.007 
        fpart = fpart * pow(10, afterpoint); 
  
        intToStr((int)fpart, res + i + 1, afterpoint); 
    } 
} 
	
// interrupt handler for neasuring temperature
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	//convert value from adc buffer to temperature in Centigrade
	Temperature = (float)(adc_buf-100)/10;
	if(Temperature < 36.1 )
	{
		low_temp = 1;
		high_temp = 0;
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	}
	else if(Temperature > 37.9)
	{
		low_temp = 0;
		high_temp = 1;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	}
	else
	{
		low_temp = 0;
		high_temp = 0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}
	
/* USER CODE END 0 */



int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
	i2cBuf[0]= 0x06; //28 ;//Register Address
	i2cBuf[1]= 0x03; //Data to write      //0x03
	//setting mode to SpO2
	
	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10); // sending address for max30100 
	HAL_Delay(20);
			
	i2cBuf[0]= 0x07; //28 ;//Register Address
	i2cBuf[1]= 0xFF; //Data to write
	//setting SpO2 (100Hz sampling rate, 800us pulse width)
	
	HAL_I2C_Master_Transmit(&hi2c1, max30100,i2cBuf, 2, 10); //testing successful I2C transmit
	
	i2cBuf[0]= 0x09; //28 ;//Register Address
	i2cBuf[1]= 0xFF; //Data to write
	//0x09 is LED config register, 0xFF will set LED currents to be 50mA for IR and Red Led

	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10);
	
	i2cBuf[0]= 0x02; //28 ;//Register Address
	i2cBuf[1]= 0x00; //Data to write
	//0x02 is FIFO write pointer, writing 0x00 will reset it
	
	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10); 
	
	i2cBuf[0]= 0x02; //FIFO_Write_Pointer
	i2cBuf[1]= 0x00; //Data to write
	//0x03 is FIFO write pointer, writing 0x00 will reset it
	
	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10); 

  i2cBuf[0]= 0x03; //FIFO_Overflow_Pointer
	i2cBuf[1]= 0x00; //Data to write
	//0x03 is FIFO overflow counter, writing 0x00 will reset it

	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10); 

  i2cBuf[0]= 0x04; //FIFO_Read_Pointer
	i2cBuf[1]= 0x00; //Data to write
	//0x03 is FIFO read counter, writing 0x00 will reset it

	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10); 
	
	//set interrupts
	i2cBuf[0]= 0x00; //0x00 is address of interrupt register
	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 1, 10);
	
	//enable spO2 interrupts
	i2cBuf[0]= 0x01; //0x00 is address of interrupt enable register
	i2cBuf[1]= 0x10; //enable spO2 interrupt
	HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 2, 10);
	
	i2cBuf[1]= 0x00; 

	newBuf1[1]=0;
	newBuf1[2]=0;
	newBuf1[3]=0;
	newBuf1[4]=0;
  /* USER CODE END 2 */
  
  
	
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
	i2cBuf[0]= 0x03; //FIFO_Overflow_Pointer
		i2cBuf[1]= 0x00; //Data to write
		//0x03 is FIFO overflow counter, writing 0x00 will reset it
		// reset
		HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 1, 10);
				
		HAL_I2C_Master_Transmit(&hi2c1, max30100, i2cBuf, 1, 10); 
		HAL_I2C_Master_Receive(&hi2c1, max30100, &i2cBuf[1], 1, 10); 
		
		WR_PTR[0]= 0x02; //FIFO_Write_Pointer

		HAL_I2C_Master_Transmit(&hi2c1, max30100, WR_PTR, 1, 10);//send address of FIFO Write Pointer
		HAL_I2C_Master_Receive(&hi2c1, max30100, &WR_PTR[1], 1, 10);//read FIFO write pointer (define WR_PTR)

		RD_PTR[0]= 0x04; //FIFO_Read_Pointer
		HAL_I2C_Master_Transmit(&hi2c1, max30100, RD_PTR, 1, 10);//send address of FIFO read Pointer
		HAL_I2C_Master_Receive(&hi2c1, max30100, &RD_PTR[1], 1, 10);//read FIFO read pointer (define RD_PTR)
	
		sensor_samples=WR_PTR[1]-RD_PTR[1];  //Number of available samples
	
		newBuf1[0]= 0x05; //FIFO DATA Register
		for(k=0; k<sensor_samples; k++)
		{
			HAL_I2C_Master_Transmit(&hi2c1, max30100, newBuf1, 1, 10);
			HAL_I2C_Master_Receive(&hi2c1, max30100, &newBuf1[1], 4, 10);
			IR =(float) ((newBuf1[1]<<8)| newBuf1[2]);
	
			HAL_Delay(10);
			
			//dc removed from IR
			alpha = 0.95;
			x = IR;
			prev_w = w_n;
			w_n = x + alpha*prev_w;
			y_IR = w_n - prev_w;
			
			
			// low pass butterworth filter with Fs = 100Hz, Fc = 10Hz		
			v2 = v3;
			v3 = (0.2 *y_IR) + (0.5 * v2);
			v1 = (0.2452372752527856026 * y_IR) + (0.50952544949442879485 * v0);
			result_IR = v2 + v3;
				

			//detecting pulse
			if(IR < 2000)
			{
				Pulse_rate = 0;
				zero = 0;
				t2 = 0;
			}
			else
			{
					if(result_IR <= 0 && flag_high == 1)
					{	
							zero++;
							if(zero % 2 == 0)
							{
									pulse++;
									t2 = t;
									if(IR < 20000)
									{
										Pulse_rate = 0;
									}
									else
									{
										Pulse_rate = (float)( pulse * 600 ) / (float)(t2 - t1);
									}
									
									if(Pulse_rate < 60)
									{
											low_pulse = 1;
											high_pulse = 0;
											HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
											HAL_Delay(10);
											HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
																						
									}
									else if (Pulse_rate > 100)
									{
											high_pulse = 1;
											low_pulse = 0;										
											HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
											HAL_Delay(10);
											HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
									}
									else
									{
											low_pulse = 0;
											high_pulse = 0;
											HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
											HAL_Delay(10);
											HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
									}
							}
							flag_high = 0;
					}
					else
					{
						flag_high = 1;
					}
				}
				t++;
			//detecting pulse end
			
			
			//calculating oxygen
			R =(float)((newBuf1[3]<<8)| newBuf1[4]);
			ratioRMS = IR/R;
			if(IR < 20000 || R < 20000)
			{
					Oxygen = 0;
			}
			else
			{
					Oxygen = 110 - (18  * ratioRMS);
			}
					if(Oxygen > 100 || Oxygen < 60)
					{
						Oxygen = 0;
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
						HAL_Delay(10);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
					}
					
					if(Oxygen < 90)
					{
						oxygen_danger = 1;
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						HAL_Delay(10);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
					}
					else
					{
						oxygen_danger = 0;
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
						HAL_Delay(10);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
					}
			//calculating oxygen end
		
			//updating read pointer to next position		
			RD_PTR[0]= 0x04; //FIFO_Read_Pointer
			RD_PTR[1]= RD_PTR[1] + 1;
			rd_point+=1;
			HAL_I2C_Master_Transmit(&hi2c1, max30100, RD_PTR, 2, 10);//send address of FIFO read Pointer
					
			//updating pointer when samples are finished
				if(rd_point >100)
				{
					rd_point = 0;
					RD_PTR[1] = 0;
					HAL_I2C_Master_Transmit(&hi2c1, max30100, RD_PTR, 2, 10);//send address of FIFO read Pointer
				}
				
				
			//converting vital signs to string for UART transmission	
			ftoa(Pulse_rate, txData1, 2); 
			ftoa(Temperature, txData2, 2);
			ftoa(Oxygen, txData3, 2);
				
			//concatenating the data to be transmitted in a single transmission
			strcat(txData1, " BPM ");
			strcat(txData1, txData2);
			strcat(txData1, " C ");
			strcat(txData1, txData3);
			strcat(txData1, " % ");
				
			//transmitting data through UART to server
			HAL_UART_Transmit(&huart2, (uint8_t *)txData1, strlen(txData1), 10);
			HAL_Delay(10);

			}
  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
